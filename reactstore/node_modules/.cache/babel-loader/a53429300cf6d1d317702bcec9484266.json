{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/ReactStore/reactstore/src/Context.js\";\nimport React, { useState, useEffect, Component } from 'react';\nimport { storeProducts, detailProduct } from './data';\nexport const ProductContext = React.createContext();\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };\nexport default class ProductProvider extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...prod,\n        handleDetail: handleDetail,\n        addToCart: addToCart,\n        openModal: openModal,\n        closeModal: closeModal,\n        increment: increment,\n        decrement: decrement,\n        removeItem: removeItem\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, props.children));\n  }\n\n}\n/* function ProductProvider (props) {\n  const [prod, setProd] = useState({\n    products: [],\n    detailProd: detailProduct,\n    cart: storeProducts,\n    modalOpen: false,\n    modalProduct: detailProduct,\n    cartSubTotal: 0,\n    cartTax: 0,\n    cartTotal: 0\n  })\n  useEffect(() => setProducts())\n\n  let handleDetail = () => {\n    console.log('hello from detail')\n    const product = getItem()\n    setProd({ ...prod, detailProduct: product })\n  }\n\n  let addToCart = id => {\n    let tempProducts = [...prod.products]\n    const index = tempProducts.indexOf(getItem(id))\n    const product = tempProducts[index]\n    product.inCart = true\n    product.count = 1\n    const price = product.price\n    product.total = price\n    setProd({ ...prod, products: tempProducts, cart: [...prod.cart, product] })\n  }\n\n  let getItem = (id) => {\n    const product = prod.products.find(item => item.id == id)\n    return product\n  }\n  let setProducts = () => {\n    let tempProducts = []\n    storeProducts.forEach(item => {\n      const singleItem = { ...item }\n      tempProducts = [...tempProducts, singleItem]\n    })\n    setProd({ products: tempProducts })\n  }\n  let closeModal = () => {\n    setProd({ ...prod, modalOpen: false })\n  }\n  let openModal = id => {\n    const product = getItem(id)\n    setProd({ ...prod, modalProduct: product, modalOpen: true })\n  }\n  let increment = id => {\n    let tempCart = [...prod.cart]\n    let selectProduct = tempCart.find(x => x.id === id)\n    const index = selectProduct.indexOf(selectProduct)\n    const product = tempCart[index]\n    product.count += 1\n    product.total = product.count * product.price\n    setProd({ ...prod, cart: [...tempCart] })\n    addTotals()\n  }\n\n  let decrement = id => {\n    let tempCart = [...prod.cart]\n    let selectProduct = tempCart.find(x => x.id === id)\n    const index = selectProduct.indexOf(selectProduct)\n    const product = tempCart[index]\n    product.count -= 1\n    if (product.count <= 0) removeItem(id)\n    else {\n      product.total = product.count * product.price\n    }\n    setProd({ ...prod, cart: [...tempCart] })\n    addTotals()\n  }\n\n  let removeItem = id => {\n    let tempProducts = [...prod.products]\n    let tempCart = [...prod.cart]\n    tempCart = tempCart.filter(x => {\n      return (x.id !== id)\n    })\n    const index = tempProducts.indexOf(getItem(id))\n    let removedProduct = tempProducts[index]\n    removedProduct.inCart = false\n    removedProduct.count = 0\n    removedProduct.total = 0\n    setProd({ ...prod, cart: tempCart, products: tempProducts })\n  }\n  let clearCart = () => {\n    setProd({ ...prod, cart: [] })\n    setProducts()\n    addTotals()\n  }\n  let addTotals = () => {\n    let subTotal = 0\n    prod.cart.map(x => {\n      return (subTotal += x.total)\n    })\n    const tempTax = subTotal * 0.1\n    const tax = parseFloat(tempTax.toFixed(2))\n    const total = subTotal + tax\n    setProd({ ...prod, cartSubTotal: subTotal, cartTax: tax, cartTotal: total })\n  }\n\n // setProd({ ...prod, products: tempProducts })\n\n  //const [detailProducts,setDetailProducts]=useState(detailProduct)\n  return (\n    <>\n      <ProductContext.Provider\n        value={{\n          ...prod,\n          handleDetail: handleDetail,\n          addToCart: addToCart,\n          openModal: openModal,\n          closeModal: closeModal,\n          increment: increment,\n          decrement: decrement,\n          removeItem: removeItem\n        }}\n      >\n        {props.children}\n      </ProductContext.Provider>\n    </>\n  )\n}*/","map":{"version":3,"sources":["/Users/daniel/Documents/ReactStore/reactstore/src/Context.js"],"names":["React","useState","useEffect","Component","storeProducts","detailProduct","ProductContext","createContext","ProductConsumer","Consumer","ProductProvider","render","prod","handleDetail","addToCart","openModal","closeModal","increment","decrement","removeItem","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,QAA7C;AACA,OAAO,MAAMC,cAAc,GAAGN,KAAK,CAACO,aAAN,EAAvB;AAEP,MAAMC,eAAe,GAAGF,cAAc,CAACG,QAAvC;AACA,SAASC,eAAT,EAA0BF,eAA1B;AACA,eAAe,MAAME,eAAN,SAA8BP,SAA9B,CACf;AAEEQ,EAAAA,MAAM,GAAE;AACR,wBACE,uDACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,MAAA,KAAK,EAAE,EACL,GAAGC,IADE;AAELC,QAAAA,YAAY,EAAEA,YAFT;AAGLC,QAAAA,SAAS,EAAEA,SAHN;AAILC,QAAAA,SAAS,EAAEA,SAJN;AAKLC,QAAAA,UAAU,EAAEA,UALP;AAMLC,QAAAA,SAAS,EAAEA,SANN;AAOLC,QAAAA,SAAS,EAAEA,SAPN;AAQLC,QAAAA,UAAU,EAAEA;AARP,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYGC,KAAK,CAACC,QAZT,CADF,CADF;AAmBD;;AAtBD;AAwBA","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\nimport { storeProducts, detailProduct } from './data'\nexport const ProductContext = React.createContext()\n\nconst ProductConsumer = ProductContext.Consumer\nexport { ProductProvider, ProductConsumer }\nexport default class ProductProvider extends Component\n{\n  \n  render(){\n  return (\n    <>\n      <ProductContext.Provider\n        value={{\n          ...prod,\n          handleDetail: handleDetail,\n          addToCart: addToCart,\n          openModal: openModal,\n          closeModal: closeModal,\n          increment: increment,\n          decrement: decrement,\n          removeItem: removeItem\n        }}\n      >\n        {props.children}\n      </ProductContext.Provider>\n    </>\n  )\n  \n}\n}\n/* function ProductProvider (props) {\n  const [prod, setProd] = useState({\n    products: [],\n    detailProd: detailProduct,\n    cart: storeProducts,\n    modalOpen: false,\n    modalProduct: detailProduct,\n    cartSubTotal: 0,\n    cartTax: 0,\n    cartTotal: 0\n  })\n  useEffect(() => setProducts())\n\n  let handleDetail = () => {\n    console.log('hello from detail')\n    const product = getItem()\n    setProd({ ...prod, detailProduct: product })\n  }\n\n  let addToCart = id => {\n    let tempProducts = [...prod.products]\n    const index = tempProducts.indexOf(getItem(id))\n    const product = tempProducts[index]\n    product.inCart = true\n    product.count = 1\n    const price = product.price\n    product.total = price\n    setProd({ ...prod, products: tempProducts, cart: [...prod.cart, product] })\n  }\n\n  let getItem = (id) => {\n    const product = prod.products.find(item => item.id == id)\n    return product\n  }\n  let setProducts = () => {\n    let tempProducts = []\n    storeProducts.forEach(item => {\n      const singleItem = { ...item }\n      tempProducts = [...tempProducts, singleItem]\n    })\n    setProd({ products: tempProducts })\n  }\n  let closeModal = () => {\n    setProd({ ...prod, modalOpen: false })\n  }\n  let openModal = id => {\n    const product = getItem(id)\n    setProd({ ...prod, modalProduct: product, modalOpen: true })\n  }\n  let increment = id => {\n    let tempCart = [...prod.cart]\n    let selectProduct = tempCart.find(x => x.id === id)\n    const index = selectProduct.indexOf(selectProduct)\n    const product = tempCart[index]\n    product.count += 1\n    product.total = product.count * product.price\n    setProd({ ...prod, cart: [...tempCart] })\n    addTotals()\n  }\n\n  let decrement = id => {\n    let tempCart = [...prod.cart]\n    let selectProduct = tempCart.find(x => x.id === id)\n    const index = selectProduct.indexOf(selectProduct)\n    const product = tempCart[index]\n    product.count -= 1\n    if (product.count <= 0) removeItem(id)\n    else {\n      product.total = product.count * product.price\n    }\n    setProd({ ...prod, cart: [...tempCart] })\n    addTotals()\n  }\n\n  let removeItem = id => {\n    let tempProducts = [...prod.products]\n    let tempCart = [...prod.cart]\n    tempCart = tempCart.filter(x => {\n      return (x.id !== id)\n    })\n    const index = tempProducts.indexOf(getItem(id))\n    let removedProduct = tempProducts[index]\n    removedProduct.inCart = false\n    removedProduct.count = 0\n    removedProduct.total = 0\n    setProd({ ...prod, cart: tempCart, products: tempProducts })\n  }\n  let clearCart = () => {\n    setProd({ ...prod, cart: [] })\n    setProducts()\n    addTotals()\n  }\n  let addTotals = () => {\n    let subTotal = 0\n    prod.cart.map(x => {\n      return (subTotal += x.total)\n    })\n    const tempTax = subTotal * 0.1\n    const tax = parseFloat(tempTax.toFixed(2))\n    const total = subTotal + tax\n    setProd({ ...prod, cartSubTotal: subTotal, cartTax: tax, cartTotal: total })\n  }\n\n // setProd({ ...prod, products: tempProducts })\n\n  //const [detailProducts,setDetailProducts]=useState(detailProduct)\n  return (\n    <>\n      <ProductContext.Provider\n        value={{\n          ...prod,\n          handleDetail: handleDetail,\n          addToCart: addToCart,\n          openModal: openModal,\n          closeModal: closeModal,\n          increment: increment,\n          decrement: decrement,\n          removeItem: removeItem\n        }}\n      >\n        {props.children}\n      </ProductContext.Provider>\n    </>\n  )\n}*/\n"]},"metadata":{},"sourceType":"module"}