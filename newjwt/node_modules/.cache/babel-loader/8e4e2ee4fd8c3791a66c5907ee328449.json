{"ast":null,"code":"import React, { useContext, useReducer, useRef, useMemo, useEffect } from 'react';\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar StoreContext = /*#__PURE__*/React.createContext(null);\nvar SET_VALUE = 'SET VALUE';\nvar REMOVE_VALUE = 'REMOVE VALUE';\nvar RESET = 'RESET STORE';\n\nfunction mainReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_VALUE:\n      {\n        var _action$payload = action.payload,\n            key = _action$payload.key,\n            value = _action$payload.value;\n\n        var newState = _objectSpread2({}, state);\n\n        newState[key] = value;\n        return newState;\n      }\n\n    case REMOVE_VALUE:\n      {\n        var _key = action.payload.key;\n\n        var _newState = _objectSpread2({}, state);\n\n        delete _newState[_key];\n        return _newState;\n      }\n\n    case RESET:\n      {\n        return action.payload;\n      }\n\n    default:\n      return state;\n  }\n}\n\nvar rootReducer = combineReducers({\n  main: mainReducer\n});\n\nvar logger = function logger(_ref) {\n  var getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      var prevState = getState().main;\n      var returnValue = next(action);\n      console.group(\"%c react-context-hook\", 'font-weight: bold');\n      console.info(\"%c \".concat('PREV STATE', \" \"), 'background: #00e5a0;font-weight: bold', prevState);\n      console.info(\"%c \".concat('ACTION', \" %c \", action.type), 'background: yellow;font-weight: bold', 'font-weight: bold;', action.payload.key || '', action.payload.value || action.payload);\n      console.info(\"%c \".concat('NEXT STATE', \" \"), 'background: #00cbff;font-weight: bold', getState().main);\n      console.groupEnd();\n      return returnValue;\n    };\n  };\n};\n\nvar listenerMiddleware = function listenerMiddleware(listener) {\n  return function (_ref2) {\n    var getState = _ref2.getState;\n    return function (next) {\n      return function (action) {\n        var key = action.payload.key;\n        var prevValue = getState().main[key];\n        var value = next(action);\n        var nextValue = getState().main[key];\n        listener(getState().main, key, prevValue, nextValue);\n        return value;\n      };\n    };\n  };\n};\n\nfunction storeCreator() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var logging = config.logging,\n      listener = config.listener;\n  var middlewares = [listener && listenerMiddleware(listener), logging && logger].filter(Boolean);\n  return createStore(rootReducer, {\n    main: initialValue\n  }, applyMiddleware.apply(void 0, _toConsumableArray(middlewares)));\n}\n\nvar setStoreValueAction = function setStoreValueAction(key, value) {\n  return {\n    type: SET_VALUE,\n    payload: {\n      key: key,\n      value: value\n    }\n  };\n};\n\nvar deleteStoreValueAction = function deleteStoreValueAction(key) {\n  return {\n    type: REMOVE_VALUE,\n    payload: {\n      key: key\n    }\n  };\n};\n\nvar resetStoreWithValue = function resetStoreWithValue() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    type: RESET,\n    payload: state\n  };\n};\n\nfunction createRawStore(store) {\n  return {\n    /**\n     * Resets the state to the given input.\n     *\n     * @param {Object} state the new value to reset the state to.\n     */\n    reset: function reset(state) {\n      store.dispatch(resetStoreWithValue(state));\n    },\n\n    /**\n     * Sets the specified key in the store. This function is equivaluent to the `useSetStoreValue` hook.\n     *\n     * @param {string} key the property to set in the store\n     * @param {Object} value the value of the property\n     */\n    set: function set(key, value) {\n      store.dispatch(setStoreValueAction(key, value));\n    },\n\n    /**\n     * delete the specified key from the store. This function is equivaluent to the `useDeleteStoreValue` hook.\n     *\n     * @param {string} key the property to set in the store\n     */\n    \"delete\": function _delete(key) {\n      store.dispatch(deleteStoreValueAction(key));\n    },\n\n    /**\n     * @returns the global state value of the store\n     */\n    getState: function getState() {\n      return store.getState().main;\n    }\n  };\n}\n\nvar defaultConfig = {};\n/**\n * This store can be used outside of React components.\n */\n\nvar rawStore = createRawStore(storeCreator());\n/**\n * @callback ConfigListener\n * @param {Object} state\n * @param {string} key\n * @param {any} prevValue\n * @param {any} nextValue\n * @returns {void}\n */\n\n/**\n * @param {ReactElement} WrappedComponent the component to connect with the store\n * @param {Object} [initialValue] an Object that will be the initial store value, or nothing\n * @param {Object} [config] the custom configuration. If nothing is passed, the default config will be used.\n * @param {ConfigListener} config.listener a function that is triggered each time the global state is modified. This function takes these parameters: (state, key, prevValue, nextValue). `state` is the value of the new state, `key` is the key that changed, `prevValue` is the old value of the key, `nextValule` is the new one.\n * @param {boolean} config.logging - default `false` - if true it will log changes to console\n * @example\n *const initialState = { count: 10 }\n *\n *const storeConfig = {\n *  listener: (state, key, prevValue, nextValue) => {\n      console.log(`the key \"${key}\" changed in the store`)\n      console.log('the old value is', prevValue)\n      console.log('the current value is', nextValue)\n      console.log('the state is', state)\n    },\n *  logging: process.env.NODE_ENV !== 'production'\n *}\n *\n *export default withStore(App, initialState, storeConfig)\n */\n\nvar withStore = function withStore(WrappedComponent, initialValue, config) {\n  var userConfig = Object.freeze(_objectSpread2(_objectSpread2({}, defaultConfig), config));\n  var store = storeCreator(initialValue, userConfig);\n  rawStore = createRawStore(store);\n  return function (props) {\n    return /*#__PURE__*/React.createElement(StoreContext.Provider, {\n      value: {\n        store: store\n      }\n    }, /*#__PURE__*/React.createElement(WrappedComponent, props));\n  };\n};\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription(store, onStateChange) {\n    _classCallCheck(this, Subscription);\n\n    this.store = store; // this.handleChangeWrapper = this.handleChangeWrapper.bind(this)\n\n    this.unsuscribeFromSubscription = null;\n    this.onStateChange = onStateChange.bind(this);\n  }\n\n  _createClass(Subscription, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      this.unsuscribeFromSubscription = this.store.subscribe(this.onStateChange);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.unsuscribeFromSubscription();\n      this.unsuscribeFromSubscription = null;\n    }\n  }]);\n\n  return Subscription;\n}();\n\nfunction equalityFn(a, b) {\n  return a === b;\n}\n\nfunction useSelector(stateSelectorFn) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      forceRender = _useReducer2[1];\n\n  var _useContext = useContext(StoreContext),\n      store = _useContext.store;\n\n  var latestStateSelectorFn = useRef();\n  var latestSelectedState = useRef();\n\n  function checkForUpdates() {\n    try {\n      var newSelectedState = latestStateSelectorFn.current(store.getState().main);\n\n      if (equalityFn(newSelectedState, latestSelectedState.current)) {\n        return;\n      }\n\n      latestSelectedState.current = newSelectedState;\n    } catch (err) {// ignore all errors\n    }\n\n    forceRender({});\n  }\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, checkForUpdates);\n  }, [store, checkForUpdates]);\n  var resultValue;\n\n  if (stateSelectorFn !== latestStateSelectorFn.current) {\n    resultValue = stateSelectorFn(store.getState().main);\n  } else {\n    resultValue = latestSelectedState.current;\n  }\n\n  useEffect(function () {\n    latestStateSelectorFn.current = stateSelectorFn;\n    latestSelectedState.current = resultValue;\n  });\n  useEffect(function () {\n    subscription.subscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, [store, subscription]);\n  return resultValue;\n}\n/**\n * `useStore` is a React Hook that access a value stored in the application global store. It returns the value, a function to update it (like React.useState) and a function to delete it.\n *\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {T} [defaultValue] - The value if the value in the store is missing\n *\n * @returns {[T, (value: T) => void, () => void]}\n * @return {array} an array with length 3:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store.<br>\n * position 2 - a function *deleteValue* to delete the value from the store.<br>\n *\n * @example\n * import {useStore} from 'react-context-hook'\n * const [username, setUsername, deleteUsername] = useStore('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n */\n\n\nfunction useStore(key, defaultValue) {\n  return [useStoreValue(key, defaultValue), useSetStoreValue(key), useDeleteStoreValue(key)];\n}\n/**\n * Returns a function to set or update a variable in the store. You want to use this hook when you just need to modify the store, not read or delete a value from it.\n * @template {any} T\n * @param {string} key - the name of the variable to set in the store\n * @returns {(value: T) => void}\n * @return {Function} - a function to set a variable in the store with the given name<br>\n *\n * @example\n * import {useSetStoreValue} from 'react-context-hook'\n * const setUsername = useSetStoreValue('username')\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n */\n\n\nfunction useSetStoreValue(key) {\n  var _useContext2 = useContext(StoreContext),\n      store = _useContext2.store;\n\n  return function (value) {\n    store.dispatch(setStoreValueAction(key, value));\n  };\n}\n/**\n * Returns a function to delete a variable in the store. You want to use this hook when you just need to delete a value in the store, not read or set a value from it.\n * @template {any} T\n * @param {string} key - the name of the variable to set in the store\n * @returns {(value: T) => void}\n * @return {Function} - a function to delete a variable in the store with the given name.\n *\n * @example\n * import {useDeleteStoreValue} from 'react-context-hook'\n * const deleteUsername = useDeleteStoreValue('username')\n * <button onClick={()=> deleteUsername()}>set username</button>\n */\n\n\nfunction useDeleteStoreValue(key) {\n  var _useContext3 = useContext(StoreContext),\n      store = _useContext3.store;\n\n  return function () {\n    store.dispatch(deleteStoreValueAction(key));\n  };\n}\n/**\n *This React hook returns an array to read and modify a value in the store:\n * `const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {T} [defaultValue] - The default value if missing\n * @returns {[T, (value: T) => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store.<br>\n *\n * @example\n * import {useGetAndSet} from 'react-context-hook'\n * const [username, setUsername] = useGetAndSet('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n *  const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')\n *\n */\n\n\nfunction useGetAndSet(key, defaultValue) {\n  return [useStoreValue(key, defaultValue), useSetStoreValue(key)];\n}\n/**\n *This React hook returns an array to read and delete a value in the store:\n * `const [value, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {[T, (value: T) => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *deleteValue* to delete the data in the store.<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\n\n\nfunction useGetAndDelete(key) {\n  return [useStoreValue(key), useDeleteStoreValue(key)];\n}\n/**\n *This React hook returns an array to set and delete a value in the store:\n * `const [setValue, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {[(value: T) => void, () => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - a function *setValue* to modify the data in the store.<br>\n * position 1 - a function *deleteValue* to delete the data in the store.<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\n\n\nfunction useSetAndDelete(key) {\n  return [useSetStoreValue(key), useDeleteStoreValue(key)];\n}\n/**\n *\n * @template {any} T\n * @param {string} key - the name of the variable / value to be retrieved in the global store.\n * @param {T} [defaultValue] - an optional default value, if the value in the global store is not present.\n *\n * @returns {T | typeof defaultValue} the value on the global store, or the default value if passed, or `undefined`\n */\n\n\nfunction useStoreValue(key, defaultValue) {\n  function stateSelector(state) {\n    return state[key];\n  }\n\n  var storeValue = useSelector(stateSelector);\n  return storeValue !== undefined ? storeValue : defaultValue;\n}\n/**\n * Returns the whole store value, with all the variables stored in it. Changes to this object will not change the store\n *\n * @returns {Record}\n * @return {object} - An object representing the whole store value in read only mode.\n *\n * @example\n * import {useStoreState} from 'react-context-hook'\n * const store = useStoreState()\n * console.log('the store is', JSON.stringify(store))\n */\n\n\nfunction useStoreState() {\n  function stateSelector(state) {\n    return state;\n  }\n\n  return useSelector(stateSelector);\n}\n\nexport { rawStore as store, useDeleteStoreValue, useGetAndDelete, useGetAndSet, useSetAndDelete, useSetStoreValue, useStore, useStoreState, useStoreValue, withStore };","map":{"version":3,"sources":["../src/StoreContext.js","../src/redux/actionTypes.js","../src/redux/reducer.js","../src/redux/middleware.js","../src/redux/store.js","../src/redux/actions.js","../src/rawStore.js","../src/defaultConfig.js","../src/withStore.js","../src/redux/util/Subscription.js","../src/useStore.js"],"names":["React","SET_VALUE","REMOVE_VALUE","RESET","state","action","key","value","newState","combineReducers","main","mainReducer","logger","getState","prevState","returnValue","next","console","listenerMiddleware","prevValue","nextValue","listener","initialValue","config","logging","middlewares","createStore","applyMiddleware","setStoreValueAction","type","payload","deleteStoreValueAction","resetStoreWithValue","reset","store","set","rawStore","createRawStore","withStore","userConfig","Object","Subscription","onStateChange","a","forceRender","useReducer","s","useContext","latestStateSelectorFn","useRef","latestSelectedState","newSelectedState","equalityFn","subscription","useMemo","stateSelectorFn","resultValue","useEffect","checkForUpdates","useStoreValue","useSetStoreValue","useDeleteStoreValue","storeValue","useSelector"],"mappings":"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","sourcesContent":["import React from 'react'\nexport default React.createContext(null)\n","export const SET_VALUE = 'SET VALUE'\nexport const REMOVE_VALUE = 'REMOVE VALUE'\nexport const RESET = 'RESET STORE'\n","import { combineReducers } from 'redux'\n\nimport { SET_VALUE, REMOVE_VALUE, RESET } from './actionTypes'\n\nfunction mainReducer(state = {}, action) {\n  switch (action.type) {\n    case SET_VALUE: {\n      const { key, value } = action.payload\n      const newState = {\n        ...state\n      }\n      newState[key] = value\n      return newState\n    }\n    case REMOVE_VALUE: {\n      const { key } = action.payload\n      const newState = {\n        ...state\n      }\n      delete newState[key]\n      return newState\n    }\n    case RESET: {\n      return action.payload\n    }\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({ main: mainReducer })\n","export const logger = ({ getState }) => (next) => (action) => {\n  const prevState = getState().main\n  const returnValue = next(action)\n  console.group(`%c react-context-hook`, 'font-weight: bold')\n  console.info(\n    `%c ${'PREV STATE'} `,\n    'background: #00e5a0;font-weight: bold',\n    prevState\n  )\n  console.info(\n    `%c ${'ACTION'} %c ${action.type}`,\n    'background: yellow;font-weight: bold',\n    'font-weight: bold;',\n    action.payload.key || '',\n    action.payload.value || action.payload\n  )\n  console.info(\n    `%c ${'NEXT STATE'} `,\n    'background: #00cbff;font-weight: bold',\n    getState().main\n  )\n  console.groupEnd()\n  return returnValue\n}\n\nexport const listenerMiddleware = (listener) => ({ getState }) => (next) => (\n  action\n) => {\n  const { key } = action.payload\n  const prevValue = getState().main[key]\n  const value = next(action)\n  const nextValue = getState().main[key]\n  listener(getState().main, key, prevValue, nextValue)\n  return value\n}\n\n/**\n * @deprecated Use listenerMiddleware\n */\nexport const listernerMiddleware = listenerMiddleware\n","import { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducer'\nimport { logger, listenerMiddleware } from './middleware'\n\nexport default function storeCreator(initialValue = {}, config = {}) {\n  const { logging, listener } = config\n\n  const middlewares = [\n    listener && listenerMiddleware(listener),\n    logging && logger\n  ].filter(Boolean)\n\n  return createStore(\n    rootReducer,\n    { main: initialValue },\n    applyMiddleware(...middlewares)\n  )\n}\n","import { SET_VALUE, REMOVE_VALUE, RESET } from './actionTypes'\n\nexport const setStoreValueAction = (key, value) => ({\n  type: SET_VALUE,\n  payload: {\n    key,\n    value\n  }\n})\n\nexport const deleteStoreValueAction = (key) => ({\n  type: REMOVE_VALUE,\n  payload: {\n    key\n  }\n})\n\nexport const resetStoreWithValue = (state = {}) => ({\n  type: RESET,\n  payload: state\n})\n","import {\n  resetStoreWithValue,\n  setStoreValueAction,\n  deleteStoreValueAction\n} from './redux/actions'\n\nexport function createRawStore(store) {\n  return {\n    /**\n     * Resets the state to the given input.\n     *\n     * @param {Object} state the new value to reset the state to.\n     */\n    reset: function (state) {\n      store.dispatch(resetStoreWithValue(state))\n    },\n    /**\n     * Sets the specified key in the store. This function is equivaluent to the `useSetStoreValue` hook.\n     *\n     * @param {string} key the property to set in the store\n     * @param {Object} value the value of the property\n     */\n    set: function (key, value) {\n      store.dispatch(setStoreValueAction(key, value))\n    },\n    /**\n     * delete the specified key from the store. This function is equivaluent to the `useDeleteStoreValue` hook.\n     *\n     * @param {string} key the property to set in the store\n     */\n    delete: function (key) {\n      store.dispatch(deleteStoreValueAction(key))\n    },\n    /**\n     * @returns the global state value of the store\n     */\n    getState: function () {\n      return store.getState().main\n    }\n  }\n}\n","export default {}\n","import React from 'react'\nimport StoreContext from './StoreContext'\nimport createStore from './redux/store'\nimport { createRawStore } from './rawStore'\nimport defaultConfig from './defaultConfig'\n\n/**\n * This store can be used outside of React components.\n */\nlet rawStore = createRawStore(createStore())\n\n/**\n * @callback ConfigListener\n * @param {Object} state\n * @param {string} key\n * @param {any} prevValue\n * @param {any} nextValue\n * @returns {void}\n */\n\n/**\n * @param {ReactElement} WrappedComponent the component to connect with the store\n * @param {Object} [initialValue] an Object that will be the initial store value, or nothing\n * @param {Object} [config] the custom configuration. If nothing is passed, the default config will be used.\n * @param {ConfigListener} config.listener a function that is triggered each time the global state is modified. This function takes these parameters: (state, key, prevValue, nextValue). `state` is the value of the new state, `key` is the key that changed, `prevValue` is the old value of the key, `nextValule` is the new one.\n * @param {boolean} config.logging - default `false` - if true it will log changes to console\n * @example\n *const initialState = { count: 10 }\n *\n *const storeConfig = {\n *  listener: (state, key, prevValue, nextValue) => {\n      console.log(`the key \"${key}\" changed in the store`)\n      console.log('the old value is', prevValue)\n      console.log('the current value is', nextValue)\n      console.log('the state is', state)\n    },\n *  logging: process.env.NODE_ENV !== 'production'\n *}\n *\n *export default withStore(App, initialState, storeConfig)\n */\nexport const withStore = (WrappedComponent, initialValue, config) => {\n  const userConfig = Object.freeze({ ...defaultConfig, ...config })\n  const store = createStore(initialValue, userConfig)\n  rawStore = createRawStore(store)\n  return function (props) {\n    return (\n      <StoreContext.Provider value={{ store }}>\n        <WrappedComponent {...props} />\n      </StoreContext.Provider>\n    )\n  }\n}\n\nexport { rawStore }\n","class Subscription {\n  constructor(store, onStateChange) {\n    this.store = store\n    // this.handleChangeWrapper = this.handleChangeWrapper.bind(this)\n    this.unsuscribeFromSubscription = null\n    this.onStateChange = onStateChange.bind(this)\n  }\n\n  subscribe() {\n    this.unsuscribeFromSubscription = this.store.subscribe(this.onStateChange)\n  }\n\n  unsubscribe() {\n    this.unsuscribeFromSubscription()\n    this.unsuscribeFromSubscription = null\n  }\n}\n\nexport default Subscription\n","import { useContext, useReducer, useMemo, useRef, useEffect } from 'react'\nimport StoreContext from './StoreContext'\nimport Subscription from './redux/util/Subscription'\nimport { setStoreValueAction, deleteStoreValueAction } from './redux/actions'\n\nfunction equalityFn(a, b) {\n  return a === b\n}\n\nfunction useSelector(stateSelectorFn) {\n  const [, forceRender] = useReducer((s) => s + 1, 0)\n  const { store } = useContext(StoreContext)\n  const latestStateSelectorFn = useRef()\n  const latestSelectedState = useRef()\n  function checkForUpdates() {\n    try {\n      const newSelectedState = latestStateSelectorFn.current(\n        store.getState().main\n      )\n\n      if (equalityFn(newSelectedState, latestSelectedState.current)) {\n        return\n      }\n\n      latestSelectedState.current = newSelectedState\n    } catch (err) {\n      // ignore all errors\n    }\n\n    forceRender({})\n  }\n  const subscription = useMemo(() => new Subscription(store, checkForUpdates), [\n    store,\n    checkForUpdates\n  ])\n\n  let resultValue\n\n  if (stateSelectorFn !== latestStateSelectorFn.current) {\n    resultValue = stateSelectorFn(store.getState().main)\n  } else {\n    resultValue = latestSelectedState.current\n  }\n\n  useEffect(() => {\n    latestStateSelectorFn.current = stateSelectorFn\n    latestSelectedState.current = resultValue\n  })\n\n  useEffect(() => {\n    subscription.subscribe()\n    checkForUpdates()\n\n    return () => subscription.unsubscribe()\n  }, [store, subscription])\n\n  return resultValue\n}\n\n/**\n * `useStore` is a React Hook that access a value stored in the application global store. It returns the value, a function to update it (like React.useState) and a function to delete it.\n *\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {T} [defaultValue] - The value if the value in the store is missing\n *\n * @returns {[T, (value: T) => void, () => void]}\n * @return {array} an array with length 3:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store.<br>\n * position 2 - a function *deleteValue* to delete the value from the store.<br>\n *\n * @example\n * import {useStore} from 'react-context-hook'\n * const [username, setUsername, deleteUsername] = useStore('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n */\nfunction useStore(key, defaultValue) {\n  return [\n    useStoreValue(key, defaultValue),\n    useSetStoreValue(key),\n    useDeleteStoreValue(key)\n  ]\n}\n\n/**\n * Returns a function to set or update a variable in the store. You want to use this hook when you just need to modify the store, not read or delete a value from it.\n * @template {any} T\n * @param {string} key - the name of the variable to set in the store\n * @returns {(value: T) => void}\n * @return {Function} - a function to set a variable in the store with the given name<br>\n *\n * @example\n * import {useSetStoreValue} from 'react-context-hook'\n * const setUsername = useSetStoreValue('username')\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n */\nfunction useSetStoreValue(key) {\n  const { store } = useContext(StoreContext)\n  return function (value) {\n    store.dispatch(setStoreValueAction(key, value))\n  }\n}\n\n/**\n * Returns a function to delete a variable in the store. You want to use this hook when you just need to delete a value in the store, not read or set a value from it.\n * @template {any} T\n * @param {string} key - the name of the variable to set in the store\n * @returns {(value: T) => void}\n * @return {Function} - a function to delete a variable in the store with the given name.\n *\n * @example\n * import {useDeleteStoreValue} from 'react-context-hook'\n * const deleteUsername = useDeleteStoreValue('username')\n * <button onClick={()=> deleteUsername()}>set username</button>\n */\nfunction useDeleteStoreValue(key) {\n  const { store } = useContext(StoreContext)\n  return function () {\n    store.dispatch(deleteStoreValueAction(key))\n  }\n}\n\n/**\n *This React hook returns an array to read and modify a value in the store:\n * `const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {T} [defaultValue] - The default value if missing\n * @returns {[T, (value: T) => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store.<br>\n *\n * @example\n * import {useGetAndSet} from 'react-context-hook'\n * const [username, setUsername] = useGetAndSet('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n *  const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')\n *\n */\nfunction useGetAndSet(key, defaultValue) {\n  return [useStoreValue(key, defaultValue), useSetStoreValue(key)]\n}\n\n/**\n *This React hook returns an array to read and delete a value in the store:\n * `const [value, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {[T, (value: T) => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *deleteValue* to delete the data in the store.<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\nfunction useGetAndDelete(key) {\n  return [useStoreValue(key), useDeleteStoreValue(key)]\n}\n\n/**\n *This React hook returns an array to set and delete a value in the store:\n * `const [setValue, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {[(value: T) => void, () => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - a function *setValue* to modify the data in the store.<br>\n * position 1 - a function *deleteValue* to delete the data in the store.<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\nfunction useSetAndDelete(key) {\n  return [useSetStoreValue(key), useDeleteStoreValue(key)]\n}\n\n/**\n *\n * @template {any} T\n * @param {string} key - the name of the variable / value to be retrieved in the global store.\n * @param {T} [defaultValue] - an optional default value, if the value in the global store is not present.\n *\n * @returns {T | typeof defaultValue} the value on the global store, or the default value if passed, or `undefined`\n */\nfunction useStoreValue(key, defaultValue) {\n  function stateSelector(state) {\n    return state[key]\n  }\n  const storeValue = useSelector(stateSelector)\n  return storeValue !== undefined ? storeValue : defaultValue\n}\n\n/**\n * Returns the whole store value, with all the variables stored in it. Changes to this object will not change the store\n *\n * @returns {Record}\n * @return {object} - An object representing the whole store value in read only mode.\n *\n * @example\n * import {useStoreState} from 'react-context-hook'\n * const store = useStoreState()\n * console.log('the store is', JSON.stringify(store))\n */\nfunction useStoreState() {\n  function stateSelector(state) {\n    return state\n  }\n  return useSelector(stateSelector)\n}\n\nexport {\n  useStore,\n  useStoreState,\n  useStoreValue,\n  useSetStoreValue,\n  useDeleteStoreValue,\n  useGetAndSet,\n  useGetAndDelete,\n  useSetAndDelete\n}\n"]},"metadata":{},"sourceType":"module"}